{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.module.css","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","quoteId","useEffect","console","log","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","params","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuoteDetail","match","useRouteMatch","getSingleQuote","loadedSingleQuote","path","exact","to","url"],"mappings":"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","file":"static/js/4.57c4d64e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__2SsXl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__UxnDZ\",\"loading\":\"NewCommentForm_loading__3YF9s\",\"control\":\"NewCommentForm_control__2BCEF\",\"actions\":\"NewCommentForm_actions__27MAu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__Fm4dH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__1er6K\"};","import { useRef, useEffect } from \"react\";\n\n// components\nimport LoadingSpinner from \"../../components/UI/LoadingSpinner\";\n\n// hooks || lib\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\n\nimport classes from \"./NewCommentForm.module.css\";\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const { onAddedComment, quoteId } = props;\n\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      console.log(\"test\");\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredText = commentTextRef.current.value;\n    console.log(enteredText);\n\n    const commentFormData = {\n      commentData: { text: enteredText },\n      quoteId: quoteId,\n    };\n\n    sendRequest(commentFormData);\n\n    // optional: Could validate here\n\n    // send comment to server\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div>\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from \"react\";\n\n// react-router\nimport { useParams } from \"react-router-dom\";\n\nimport classes from \"./Comments.module.css\";\n\n// components\nimport NewCommentForm from \"./NewCommentForm\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommentsList from \"./CommentsList\";\n\n// hooks || lib\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n\n  const { quoteId } = params;\n\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  let comments;\n\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === \"completed\" && loadedComments && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n\n  if (\n    status === \"completed\" &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = <p className=\"centered\">No Comments were added yet.</p>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={params.quoteId}\n          onAddedComment={addedCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__2ArPB\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import React, { Fragment, useEffect } from \"react\";\r\n\r\n//Components\r\nimport Comments from \"../components/comments/Comments\";\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\n\r\n//React-Router\r\nimport { useParams, Route, Link, useRouteMatch } from \"react-router-dom\";\r\n\r\n//hooks || lib\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getSingleQuote } from \"../lib/api\";\r\n\r\n//Dummy-data\r\n// const DUMMY_DATA = [\r\n//   { id: \"p1\", author: \"Boggart\", text: \"An example quote\" },\r\n//   { id: \"p2\", author: \"Boggartina\", text: \"A second quote\" },\r\n// ];\r\n\r\nconst QuoteDetail = () => {\r\n  const params = useParams();\r\n  const match = useRouteMatch();\r\n\r\n  const { quoteId } = params;\r\n\r\n  const {\r\n    sendRequest,\r\n    data: loadedSingleQuote,\r\n    status,\r\n    error,\r\n  } = useHttp(getSingleQuote, true);\r\n\r\n  console.log(loadedSingleQuote);\r\n\r\n  // const quoteId = params.quoteId;\r\n  // const quote = DUMMY_DATA.find((dummyQuote) => dummyQuote.id === quoteId);\r\n\r\n  useEffect(() => {\r\n    sendRequest(quoteId);\r\n  }, [sendRequest, quoteId]);\r\n\r\n  if (status === \"pending\") {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return <p className=\"centered\">{error}</p>;\r\n  }\r\n\r\n  if (!loadedSingleQuote.text) {\r\n    return <h1>No quotes found</h1>;\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <HighlightedQuote\r\n        text={loadedSingleQuote.text}\r\n        author={loadedSingleQuote.author}\r\n      />\r\n      <Route path={match.path} exact>\r\n        <div className=\"centered\">\r\n          <Link className=\"btn--flat\" to={`${match.url}/comments`}>\r\n            Load Comments\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n      <Route path={`${match.path}/comments`}>\r\n        <Comments />\r\n      </Route>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default QuoteDetail;\r\n"],"sourceRoot":""}