{"version":3,"sources":["components/quotes/QuoteItem.module.css","components/quotes/QuoteList.module.css","components/quotes/NoQuotesFound.module.css","components/quotes/QuoteItem.js","components/quotes/QuoteList.js","components/quotes/NoQuotesFound.js","pages/AllQuote.js"],"names":["module","exports","QuoteItem","props","quoteId","id","className","classes","item","text","author","to","QuoteList","quotes","ascending","history","useHistory","location","useLocation","isSortAscending","URLSearchParams","search","get","sortedQuotes","sort","quoteA","quoteB","sorting","onClick","push","pathname","list","map","quote","NoQuotesFound","noquotes","AllQuote","useHttp","getAllQuotes","sendRequest","status","loadedQuotesData","data","error","useEffect","LoadingSpinner","length"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,0B,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,6B,mBCA3DD,EAAOC,QAAU,CAAC,SAAW,kC,wFCqBdC,EAlBG,SAACC,GACjB,IAAMC,EAAUD,EAAME,GAEtB,OACE,qBAAIC,UAAWC,IAAQC,KAAvB,UACE,mCACE,qCACE,4BAAIL,EAAMM,SAEZ,qCAAaN,EAAMO,YAErB,cAAC,IAAD,CAAMJ,UAAU,MAAMK,GAAE,kBAAaP,GAArC,iC,iBCgDSQ,EA1CG,SAACT,GACjB,IAXkBU,EAAQC,EAWpBC,EAAUC,cACVC,EAAWC,cAIXC,EAA8C,QAFhC,IAAIC,gBAAgBH,EAASI,QAEbC,IAAI,QAalCC,GA7BYV,EA6BcV,EAAMU,OA7BZC,EA6BoBK,EA5BvCN,EAAOW,MAAK,SAACC,EAAQC,GAC1B,OAAIZ,EACKW,EAAOpB,GAAKqB,EAAOrB,GAAK,GAAK,EAE7BoB,EAAOpB,GAAKqB,EAAOrB,GAAK,GAAK,MA0BxC,OACE,eAAC,WAAD,WACE,qBAAKC,UAAWC,IAAQoB,QAAxB,SACE,yBAAQC,QAhBe,WAC3Bb,EAAQc,KAAK,CACXC,SAAUb,EAASa,SACnBT,OAAO,SAAD,OAAWF,EAAkB,OAAS,UAa1C,kBACQA,EAAkB,aAAe,iBAG3C,oBAAIb,UAAWC,IAAQwB,KAAvB,SACGR,EAAaS,KAAI,SAACC,GAAD,OAChB,cAAC,EAAD,CAEE5B,GAAI4B,EAAM5B,GACVK,OAAQuB,EAAMvB,OACdD,KAAMwB,EAAMxB,MAHPwB,EAAM5B,a,yBClCR6B,EAXO,WACpB,OACE,sBAAK5B,UAAWC,IAAQ4B,SAAxB,UACE,iDACA,cAAC,IAAD,CAAM7B,UAAU,MAAMK,GAAG,aAAzB,6B,gBCwCSyB,UAlCE,WACf,MAKIC,YAAQC,KAAc,GAJxBC,EADF,EACEA,YACAC,EAFF,EAEEA,OACMC,EAHR,EAGEC,KACAC,EAJF,EAIEA,MAOF,OAJAC,qBAAU,WACRL,MACC,CAACA,IAEW,YAAXC,EAEA,qBAAKlC,UAAU,WAAf,SACE,cAACuC,EAAA,EAAD,MAKFF,EACK,mBAAGrC,UAAU,mBAAb,SAAiCqC,IAI7B,cAAXH,GACEC,GAAgD,IAA5BA,EAAiBK,OAKlC,cAAC,EAAD,CAAWjC,OAAQ4B,IAHjB,cAAC,EAAD","file":"static/js/6.b8016c72.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__1qazl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__1vkJH\",\"sorting\":\"QuoteList_sorting__37-B2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__3Mggo\"};","import classes from \"./QuoteItem.module.css\";\n\nimport { Link } from \"react-router-dom\";\n\nconst QuoteItem = (props) => {\n  const quoteId = props.id;\n\n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>{props.text}</p>\n        </blockquote>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n      <Link className=\"btn\" to={`/quotes/${quoteId}`}>\n        View Fullscreen\n      </Link>\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","import { Fragment } from \"react\";\n\n// react-router\nimport { useHistory, useLocation } from \"react-router-dom\";\n\n// components\nimport QuoteItem from \"./QuoteItem\";\n\n// css || hooks || lib\nimport classes from \"./QuoteList.module.css\";\n\nconst sortQuotes = (quotes, ascending) => {\n  return quotes.sort((quoteA, quoteB) => {\n    if (ascending) {\n      return quoteA.id > quoteB.id ? 1 : -1;\n    } else {\n      return quoteA.id < quoteB.id ? 1 : -1;\n    }\n  });\n};\n\nconst QuoteList = (props) => {\n  const history = useHistory();\n  const location = useLocation();\n\n  const queryParams = new URLSearchParams(location.search);\n\n  const isSortAscending = queryParams.get(\"sort\") === \"asc\";\n\n  const changeSortingHandler = () => {\n    history.push({\n      pathname: location.pathname,\n      search: `?sort=${isSortAscending ? \"desc\" : \"asc\"}`,\n    });\n\n    // history.push(\n    //   `${location.pathname}?sort=${isSortAscending ? \"desc\" : \"asc\"}`\n    // );\n  };\n\n  const sortedQuotes = sortQuotes(props.quotes, isSortAscending);\n\n  return (\n    <Fragment>\n      <div className={classes.sorting}>\n        <button onClick={changeSortingHandler}>\n          Sort {isSortAscending ? \"Descending\" : \"Ascending\"}\n        </button>\n      </div>\n      <ul className={classes.list}>\n        {sortedQuotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n","import React from \"react\";\n\n// react-router\nimport { Link } from \"react-router-dom\";\n\nimport classes from \"./NoQuotesFound.module.css\";\n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <Link className=\"btn\" to=\"/new-quote\">\n        Add a Quote\n      </Link>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","import React, { useEffect } from \"react\";\r\n\r\n// components\r\nimport QuoteList from \"../components/quotes/QuoteList\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport NoQuotesFound from \"../components/quotes/NoQuotesFound\";\r\n\r\n// hooks || lib\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getAllQuotes } from \"../lib/api\";\r\n\r\n// dummy-data\r\n// const DUMMY_DATA = [\r\n//   { id: \"p1\", author: \"Boggart\", text: \"An example quote\" },\r\n//   { id: \"p2\", author: \"Boggartina\", text: \"A second quote\" },\r\n// ];\r\n\r\nconst AllQuote = () => {\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    data: loadedQuotesData,\r\n    error,\r\n  } = useHttp(getAllQuotes, true);\r\n\r\n  useEffect(() => {\r\n    sendRequest();\r\n  }, [sendRequest]);\r\n\r\n  if (status === \"pending\") {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return <p className=\"centered focused\">{error}</p>;\r\n  }\r\n\r\n  if (\r\n    status === \"completed\" &&\r\n    (!loadedQuotesData || loadedQuotesData.length === 0)\r\n  ) {\r\n    return <NoQuotesFound />;\r\n  }\r\n\r\n  return <QuoteList quotes={loadedQuotesData} />;\r\n};\r\n\r\nexport default AllQuote;\r\n"],"sourceRoot":""}